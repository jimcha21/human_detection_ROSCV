#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <memory.h>
#define VCOS_ALWAYS_WANT_LOGGING

#define VERSION_STRING "v1.2"

#include "bcm_host.h"
#include "interface/vcos/vcos.h"

#include "interface/mmal/mmal.h"
#include "interface/mmal/mmal_logging.h"
#include "interface/mmal/mmal_buffer.h"
#include "interface/mmal/util/mmal_util.h"
#include "interface/mmal/util/mmal_util_params.h"
#include "interface/mmal/util/mmal_default_components.h"
#include "interface/mmal/util/mmal_connection.h"

#include "ros/ros.h"
#include "sensor_msgs/Image.h"
#include "std_srvs/Empty.h"
#include "sensor_msgs/CameraInfo.h"
#include "sensor_msgs/SetCameraInfo.h"
#include "camera_info_manager/camera_info_manager.h"

#include "RaspiCamControl.h"
#include "RaspiCLI.h"

int main(int argc, char **argv){
   ros::init(argc, argv, "raspicam_raw_node");
   ros::NodeHandle n;
   camera_info_manager::CameraInfoManager c_info_man (n, "camera", "package://raspicam/calibrations/camera.yaml");
   get_status(&state_srv);

   if(!c_info_man.loadCameraInfo ("package://raspicam/calibrations/camera.yaml")){
	ROS_INFO("Calibration file missing. Camera not calibrated");
   }
   else
   {
   	c_info = c_info_man.getCameraInfo ();
	ROS_INFO("Camera successfully calibrated");
   }
   image_pub = n.advertise<sensor_msgs::Image>("camera/image", 1);
   camera_info_pub = n.advertise<sensor_msgs::CameraInfo>("camera/camera_info", 1);
   ros::ServiceServer start_cam = n.advertiseService("camera/start_capture", serv_start_cap);
   ros::ServiceServer stop_cam = n.advertiseService("camera/stop_capture", serv_stop_cap);
   ros::spin();
   close_cam(&state_srv);
   return 0;
}